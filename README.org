* Table Of contents                                                     :TOC@4:
- [[#hello-world][Hello World]]
- [[#values][Values]]
- [[#assignments-binding--variables][Assignments (binding) & variables]]
  - [[#assignments][Assignments]]
  - [[#variables][Variables]]

* Hello World
#+begin_src zig
const warn = @import("std").debug.warn;

pub fn main() void {
    warn("Hello, world!\n", .{});
}
#+end_src
* Values
#+begin_src zig
  // Top-level declarations are order-independent
  const warn = std.debug.warn;
  const std = @import("std");

  pub fn main() void {
    // different size of integers

    const one: i8 = 1;
    const two: i16 = 2;
    const three: i32 = 3;
    const four: i64 = 4;
    const five: i128 = 5;
    // all of above are also available as unsigned integers.
    // [u8, u16, u32, u64]

    //different size of floats
    const one_and_half: f16 = 1.5;
    const two_and_half: f32 = 2.5;
    const three_and_half: f64 = 3.5;
    const four_and_half: f128 = 4.5;

    // Booleans
    const truth: bool = true;
    const lie: bool = false;

    // Strings
    // Strings are UTF-8 encoded byte arrays.
    const str = "Hello Again !"; // there is type inference ofcourse
    
  }
#+end_src
* Assignments (binding) & variables
** Assignments
#+begin_src zig
  pub fn main () void {
      // const <identifier>: <type> (optional) = value;
      const x = 1;
      const y: i32 = 2;

      y += 1; // compile error, constants are immutable
  }
#+end_src
** Variables
#+begin_src zig
  pub fn main () void {
    // var <identifier>: <type> (optional) = value;
    var i = 2;
    var y: i32; // compile error variables should be initialized inline.
  }
#+end_src

